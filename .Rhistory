assign(idList, as.vector(paste("payR2018",i,"[,5]",sep="")))
idMatr <- append(idMatr, idList)
}
str(as.vector(payR201701[,5]))
idMatr <- list()
idList <- character()
for (i in month){
assign(idList, as.vector(paste("payR2018",i,"[,5]",sep="")))
idMatr <- append(idMatr, idList)
}
idMatr <- list()
idList <- list()
for (i in month){
assign(idList[i], as.vector(paste("payR2018",i,"[,5]",sep="")))
idMatr <- append(idMatr, idList[i])
}
for (i in month){
idList <- paste("idList", i, sep="")
assign(idList, as.vector(paste("payR2018",i,"[,5]",sep="")))
idMatr <- append(idMatr, idList)
}
idMatr
for (i in month){
idList <- paste("idList", i, sep="")
assign(idList, as.vector(paste("payR2018",i,"[,5]",sep="")))
}
idList01
for (i in month){
idList <- paste("idList", i, sep="")
assign(idList, as.vector(paste("payR2018",i,"$身份证号",sep="")))
}
readChar(payR201701[,5])
idMatr <- list()
for (i in month){
idMatr <- append(idMatr, as.vector(paste("payR2018",i,"[,5]",sep="")))
}
idMatr
for (i in month){
idMatr <- append(idMatr, paste("payR2018",i,"[,5]",sep=""))
}
idMatr
?data.frame
idMatr <- list()
idMatr <- list()
for (i in month){
idMatr <- append(idMatr, get(paste("payR2018",i,"[,5]",sep="")))
}
payR201801[,5]
idMatr
for (i in month){
idMatr <- append(idMatr, get(paste("payR2018",i,"$身份证号",sep="")))
}
getElement(payR201801[,5])
?getElement
getElement(payR201801,身份证号)
?column
??column
?get
for (i in month){
idMatr <- append(idMatr, mget(paste("payR2018",i,"[,5]",sep="")))
}
mget(payR201801[,5])
get(payR201701[,5])
dynGet(payR201701[,5])
idMatr <- list()
for (i in month){
assign(idMatr[i], get(paste("payR2018",i,"[,5]",sep="")))
}
for (i in month){
assign(idMatr[i], paste("payR2018",i,"[,5]",sep=""))
}
for (i in month){
assign(idMatr$i, paste("payR2018",i,"[,5]",sep=""))
}
for (i in month){
idList <- paste("idList",i,sep="")
assign(idList, paste("payR2018",i,"[,5]",sep=""))
}
idList01
idMatr <- list()
for (i in month){
idList <- paste("payR2018",i,"[,5]",sep="")
idMatr <- append(idMatr, get(idList))
}
idList01 <- payR201801[,5]
idList01
idMatr <- append(idMatr, idList01)
idMatr
idList01
as.array(idList01)
idMatr <- list()
idMatr <- append(idMatr, as.list(idList01))
idMatr
idMatr <- list()
idMatr <- append(idMatr, as.vector(idList01))
idMatr
idMatr <- list()
idMatr <- as.character(idMatr, idList01)
idMatr
idList01
as.string(idList01)
as.vector(idList01)
typeof(idList01)
as.character(idList01)
length(idList01)
dim(idList01)
class(idList01)
typeof(idList01)
idList01 <- as.character(idList01)
idList01
typeof(idList01)
class(idList01)
append(idMatr, idList01)
idMatr
idMatr <- append(idMatr, idList01)
idMatr
idMatr <- list()
idMatr[[01]] <- idList01
idMatr
?eval
idMatr <- list()
for (i in month){
idMatr[[i]] <- as.character(eval(paste("payR2018",i,"[,5]",sep="")))
}
idMatr
for (i in month){
idMatr[[i]] <- eval(paste("payR2018",i,"[,5]",sep=""))
}
idMatr
idMatr <- list()
for (i in month){
idMatr[[i]] <- eval(get("身份证号", envir=paste("payR2018",i,sep="")))
}
get("身份证号", envir=payR201801)
head(payR201701)
idMatr[[01]] <- as.character(payR201801[,5])
idMatr[[01]] <- as.character(payR201801[,5])
idMatr[[02]] <- as.character(payR201802[,5])
idMatr[[03]] <- as.character(payR201803[,5])
idMatr[[04]] <- as.character(payR201804[,5])
idMatr[[05]] <- as.character(payR201805[,5])
idMatr[[06]] <- as.character(payR201806[,5])
idMatr[[07]] <- as.character(payR201807[,5])
idMatr[[08]] <- as.character(payR201808[,5])
idMatr[[09]] <- as.character(payR201809[,5])
idMatr[[10]] <- as.character(payR201810[,5])
idMatr[[11]] <- as.character(payR201811[,5])
idMatr[[12]] <- as.character(payR201812[,5])
idMatr
str(idMatr)
count(idMatr,idMatr[[1]][1])
count(idMatr,idMatr[[1]][500])
?count
unlist(idMatr)
length(unlist(idMatr))
idCount <- list()
for (id in idMatr[[01]]){
idCount <- append(idCount, count(unlist(idMatr), id))
}
idMatr[[01]][1]
idCount
idCount <- list()
for (id in idMatr[[01]]){
idCount <- append(idCount, count(unlist(idMatr), id)$freq)
}
idCount
idCount <- list()
for (id in idMatr[[01]]){
i <- 1
idCount[i] <- append(idCount, count(unlist(idMatr), id)$freq)
i <- i+1
}
idCount
frequency(unlist(idMatr))
table(unlist(idMatr))
?table
table(unlist(idMatr))==12
tb <- table(unlist(idMatr))==12
tb
tb$names
tb <- table(unlist(idMatr))
names(tb) <- tb==12
names(tb)[tb==12]
names(tb)
tb
tb <- table(unlist(idMatr))
tb
names(tb)
names(tb)[tb==12]
length(names(tb))
length(names(tb[tb==12]))
id01 <- table(unlist(idMatr[[1]]))
names(id01[id01>1])
View(payR201701)
View(payR201702)
View(payR201703)
passed <- c(TRUE, TRUE, FALSE, TRUE)
ages <- c(15, 18, 25, 14, 19)
cmplxNums <- c(1+2i, 0+1i, 39+3i, 12+2i)
names <- c("Bob", "Ted", "Carol", "Alice")
attributes(cmplxNums)
attributes(ages)
x <- c(1,2,3,4,5,6,7,8)
class(x)
print(x)
attr(x, "dim") <- c(2,4)
class(x)
print(x)
attributes(x)
x
attr(x, "dimnames") <- list(c("A1", "A2"),
c("B1", "B2", "B3", "B4"))
print(x)
attr(x, "dim") <- NULL
attr(x, "dim") <- NULL
class(x)
print(x)
head(iris)
unclass(iris)
attributes(iris)
set.seed(1234)
fit <- kmeans(iris[1:4], 3)
plot(fit)
fit
str(fit)
names(fit)
unclass(fit)
sapply(fit, class)
x <- c(20, 30, 40)
x[3]
x[c(2,3)]
x <- c(A=20, B=30, C=40)
x[c(2,3)]
x[c("B","C")]
fit[c(2,7)]
fit[2]
fit[1]
fit[[2]]
fit$centers
fit[[2]][1,]
set.seed(1234)
fit <- kmeans(iris[1:4], 3)
means <- fit$centers
library(reshape2)
dfm <- melt(means)
names(dfm) <- c("Cluster", "Measurement", "Centimeters")
dfm$Cluster <- factor(dfm$Cluster)
head(dfm)
library(ggplot2)
ggplot(data=dfm,
aes(x=Measurement, y=Centimeters, group=Cluster)) +
geom_point(size=3, aes(shape=Cluster, color=Cluster)) +
geom_line(size=1, aes(color=Cluster)) +
ggtitle("Profiles for Iris Clusters")
3 + 2 + 5
3 + 2 +
5
for(i in 1:5) print(1:i)
for(i in 5:1) print(1:i)
pvalues <- c(.0867, .0018, .0054, .1572, .0183, .5386)
results <- ifelse(pvalues <.05, "Significant", "Not Significant")
results
pvalues <- c(.0867, .0018, .0054, .1572, .0183, .5386)
results <- vector(mode="character", length=length(pvalues))
for(i in 1:length(pvalues)){
if (pvalues[i] < .05) results[i] <- "Significant"
else results[i] <- "Not Significant"
}
results
f(2,3,4)
f <- function(x, y, z=1){
result <- x + (2*y) + (3*z)
return(result)
}
f(2,3,4)
f(2,3)
f(x=2,y=3)
f(z=4,y=3,2)
args(f)
x <- 2
y <- 3
z <- 4
f <- function(w){
z <- 2
x <- w*y*z
return(x)
}
x
f(x)
x <- 5
myenv <- new.env()
assign("x", "Homer", env=myenv)
ls()
ls(myenv)
x
get("x",env=myenv)
get("x")
myenv <- new.env()
myenv$x <- "Homer"
myenv$x
parent.env(myenv)
trim <- function(p){
trimit <- function(x){
n <- length(x)
lo <- floor(n*p) + 1
hi <- n + 1 - lo
x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
}
trimit
}
env(trim)
x <- 1:10
trim10pct <- trim(.1)
y <- trim10pct(x)
y
trim20pct <- trim(.2)
y <- trim20pct(x)
y
ls(environment(trim10pct))
get("p", env=environment(trim10pct))
makeFunction <- function(k){
f <- function(x){
print(x + k)
}
}
g <- makeFunction(10)
g(4)
k <- 2
g(4)
g(5)
ls(environment(g))
environment(g)$k
summary(women)
fit <- lm(weight ~ height, data=women)
summary(fit)
summary()
summary
class(women)
class(fit)
methods(summary)
mymethod <- function(x, ...) UseMethod("mymethod")
mymethod.a <- function(x) print("Using A")
mymethod.b <- function(x) print("Using B")
mymethod.default <- function(x) print("Using Default")
x <- 1:5
y <- 6:10
z <- 10:15
class(x) <- "a"
class(y) <- "b"
mymethod(x)
mymethod(y)
mymethod(z)
class(z) <- c("a", "b")
mymethod(z)
class(z) <- c("c", "a", "b")
mymethod(z)
set.seed(1234)
mymatrix <- matrix(rnorm(10000000), ncol=10)
accum <- function(x){
sums <- numeric(ncol(x))
for (i in 1:ncol(x)){
for(j in 1:nrow(x)){
sums[i] <- sums[i] + x[j,i]
}
}
}
system.time(accum(mymatrix))
system.time(colSums(mymatrix))
set.seed(1234)
k <- 100000
x <- rnorm(k)
set.seed(1234)
k <- 100000
x <- rnorm(k)
y <- 0
system.time(for (i in 1:length(x)) y[i] <- x[i]^2)
y <- numeric(length=k)
system.time(for (i in 1:k) y[i] <- x[i]^2)
y <- numeric(length=k)
system.time(y <- x^2)
y <- 0
system.time(for (i in 1:length(x)) y[i] <- x[i]^2)
y <- numeric(length=k)
system.time(for (i in 1:k) y[i] <- x[i]^2)
y <- numeric(length=k)
system.time(y <- x^2)
mtcars$Transmission <- factor(mtcars$a,
levels=c(1,2),
labels=c("Automatic", "Manual"))
aov(mpg ~ Transmission, data=mtcars)
head(mtcars[c("mpg", "Transmission")])
table(mtcars$Transmission)
mtcars$Transmission <- factor(mtcars$am,
levels=c(0,1),
labels=c("Manual","Automatic"))
aov(mpg ~ Transmission, data=mtcars) ## right
args(mad)
args(mad)
debug(mad)
mad(1:10)
undebug(mad)
f <- function(x, y){
z <- x + y
g(z)
}
g <- function(x){
z <- round(x)
h(z)
}
h <- function(x){
set.seed(1234)
z <- rnorm(x)
print(z)
}
options(error=recover)
f(2,3)
f(2,-3)
pkg <- "npar_1.0.tar.gz"
loc <- "http://www.statmethods.net/RiA"
url <- paste(loc, pkg, sep="/")
download.file(url, pkg)
install.packages(pkg, repos=NULL, type="source")
library(npar)
hist(life$hlef, xlab="Healthy Life Expectancy (years) at Age 65",
main="Distribution of Healthy Life Expectancy for Women",
col="grey", breaks=10)
library(ggplot2)
ggplot(data=life, aes(x=region, y=hlef)) +
geom_point(size=3, color="darkgrey") +
labs(title="Distribution of HLE Estimates by Region",
x="US Region", y="Healthy Life Expectancy at Age 65") +
theme_bw()
library(npar)
results <- oneway(hlef ~ region, life)
summary(results)
plot(results, col="lightblue", main="Multiple Comparisons",
xlab="US Region",
ylab="Healthy Life Expectancy (years) at Age 65")
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
render(example.Rmd, "html_document")
render(example.Rmd, "html_document")
install.packages("xtable")
render("women.Rmd", "html_document")
render("women.Rmd", "html_document")
render("rinaction\\women.Rmd", "html_document")
library(rmarkdown)
render("rinaction\\women.Rmd", "pdf_document")
library(rmarkdown)
render("rinaction\\women.Rmd", "word_document")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("multcomp")
knit("drugs.Rnw")
library(knitr)
knit("drugs.Rnw")
knit("drugs.Rnw")
knit("rinaction\\drugs.Rnw")
knit2pdf("rinaction\\drugs.Rnw")
install.packages("xtable")
install.packages("xtable")
library(knitr)
knit2pdf("rinaction\\drugs.Rnw")
library(knitr)
knit2pdf("rinaction\\drugs.Rnw")
?pdflatex
Sys.which("pdflatex")
Sys.getenv("PATH")
library(knitr)
knit2pdf("rinaction\\drugs.Rnw")
library(knitr)
knit2pdf("rinaction\\drugs.Rnw")
Sys.which("pdflatex")
library(knitr)
?knit
knit(input)
knit("rinaction\\drugs.Rnw")
?knitr
?knit
knit("rinaction\\drugs.Rnw", output="rinaction\\")
knit("rinaction\\drugs.Rnw", output="rinaction\\drugs.tex")
knit2pdf("rinaction\\drugs.Rnw", output="rinaction\\drugs.pdf")
install.packages("tinytex")
install.packages("tinytex")
library(tinytex)
options(tinytex.verbose = TRUE)
library(knitr)
knit("rinaction\\drugs.Rnw", output="rinaction\\drugs.tex")
knit2pdf("rinaction\\drugs.Rnw", output="rinaction\\drugs.pdf")
knit2pdf("rinaction\\drugs.Rnw", output="rinaction\\")
knit2pdf("rinaction\\drugs.Rnw")
knit("rinaction\\drugs.Rnw")
?knit
getwd()
setwd(../rinaction)
setwd(~/rinaction)
setwd(~\\rinaction)
?setwd
setwd("D:\\Dropbox\\Data\\R\\rinaction\\")
knit("rinaction\\drugs.Rnw")
knit2pdf("rinaction\\drugs.Rnw")
knit("drugs.Rnw")
knit2pdf("drugs.Rnw")
install.packages("R2wd")
library(R2wd)
install.packages("RDCOMClient")
install.packages("RDCOMClient", repos = "http://www.omegahat.org/R")
getwd()
install.packages(RDCOMClient_0.93-0.tar.gz, repos = NULL, type = "source")
install.packages("RDCOMClient_0.93-0.tar.gz", repos = NULL, type = "source")
install.packages("RDCOMClient_0.93-0.tar.gz", repos = NULL, type = "source")
